#!/usr/bin/env php
<?php

use PeacefulBit\Slate\Core\Evaluator;
use PeacefulBit\Slate\Core\Frame;
use PeacefulBit\Slate\Parser\Nodes\NativeExpression;

require_once __DIR__ . '/../vendor/autoload.php';

$code = <<<CODE
(def (iter x y)
  (if (= x y) 
      x
      (iter (+ x 1) y)))
(iter 0 10)
CODE;

$eval = new Evaluator([
    'if' => new NativeExpression(function (Frame $frame, array $arguments) {
        if (sizeof($arguments) != 3) {
            throw new \Exception('Incorrect number of arguments');
        }

        list ($test, $cons, $alt) = $arguments;

        $result = $frame->evaluate($test) ? $cons : $alt;

        echo 'Test : ', $test, PHP_EOL;
        echo 'Cons : ', $cons, PHP_EOL;
        echo 'Alt  : ', $alt, PHP_EOL;
        echo 'Res  : ', $result, PHP_EOL;
        echo PHP_EOL;

//        if ($result instanceof \PeacefulBit\Slate\Parser\Nodes\CallExpression) {
//            return ($result->close($frame));
//        }

        return $frame->evaluate($result);
    }),
    '=' => new NativeExpression(function (Frame $frame, array $arguments) {
        if (sizeof($arguments) != 2) {
            throw new \Exception('Incorrect number of arguments');
        }

        list ($left, $right) = $arguments;

        return $frame->evaluate($left) == $frame->evaluate($right);
    }),
    '+' => new NativeExpression(function (Frame $frame, array $arguments) {
        if (sizeof($arguments) != 2) {
            throw new \Exception('Incorrect number of arguments');
        }

        list ($left, $right) = $arguments;

        return $frame->evaluate($left) + $frame->evaluate($right);
    }),
    'error' => new NativeExpression(function (Frame $frame, array $arguments) {
        fwrite(STDERR, implode(' ', array_map([$frame, 'evaluate'], $arguments)) . PHP_EOL);
    })
]);

echo $eval->evaluate($code), PHP_EOL;
